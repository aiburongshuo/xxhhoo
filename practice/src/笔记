应用服务器：weblogic，jboss，tomcate，oc4j

一。tomcate的目录结构说明：
1.bin：存放服务器启动和关闭的命令文件。
2.conf：存放服务器的配置信息文件
3.lib：存放服务器自身需要的所有jar文件，也称为全局jar文件（只要部署在当前服务器中的所有项目够可以共用此文件夹中的jar）
4.logs：存放日志信息
5.temp：零时存放文件夹，没有具体的作用
6.webapps：项目部署文件夹。
7.work：服务缓存文件夹

二。启动服务器
1.要求环境变量配置了JAVA_HOME
  CATALINA_HOME = D:\javaTools\tomcate9.0\apache-tomcat-9.0.0.M21
2.点击：bin/startup.bat
3.访问：打开浏览器输入网址：http://localhost:8080

三。eclipse配置tomcate服务器
1.new--server--new server--apache tomcate--tomcate9--add...--brose浏览选择comtate根目录

四。手动发布动态web项目
1.在eclipse中创建一个Dynamic web project
2.在项目的webcontent下创建各种资源文件夹，html  jsp  css  js  img
3.在html文件夹中创建一个html页面
4.将该项目导出为war文件，右击项目名--exprot project--web--war file
5.将导出的war文件复制到tomcate目录的webapps文件夹下，启动服务器
6.访问项目：http://localhost:8080/hwua_web/html/my.html

五。通过eclipse来启动tomcate
1.是要配置server 见三
2.选择你要运行的网页右键--run as server

六。tomcate如何修改端口号
1.conf目录下有一个server.xml的配置文件
<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
2.如果是eclipse中要修改tomcate端口号是通过servers--tomcate9.0--server.xml来实现的



七。清除eclipse 中 jsp 的缓存
1、按路径找到 	F:\work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work
2、删除catalina 文件夹






1.request：请求
常用api：
getParameter("name"):获取页面表单单个元素的值
getParameterValues("name"):获取一组同名表单元素，比如说复选框
setCharacterEncoding("UTF-8"):设置字符集，要在获取参数之前执行才能解决乱码问题
setAttribute("name","value"):在请求对象中封装一个名字叫name的值
getAttribute("name"):从请求对象中通过name来获取参数

2.response：响应对象
作用：一般是服务器端跳转到客户端
重定向方法：response.sendRedirect("url");
转发：request.getRequestDispatcher("url").forward(request,response);
    
重定向和转发的区别：重定向会改变跳转后的url地址，相当于两次请求，所以请求中的参数是不能往下传递的
                                     转发不会改变跳转后的url地址，实际上是一次请求，可以将请求中的参数往下一个页面传递    

3.页面之前传参数
a。表单提交：
b。url传参： url+?+参数名=值&参数名=值.....
http://localhost:8080/my/my.jsp?name=admin
以上两种都是用request.getParameter获取
c.往request.setAttribute()保存，用getAttribute("name")来取，前提是用转发来跳转
                                     
4.session：会话
作用域：是一个浏览器或者说一个客户端与服务端之间的一次通信，可以包含多次请求和响应。每个客户端的会话都是独立的。
生命周期：浏览器发送第一个请求开始，时限已到或者浏览器关闭将消亡
作用：是可以将数据保存在服务端，互相独立，可以保存任何数据类型。重定向也可以用session传递数据
常用api：
setAttribute("name","value"):在session对象中封装一个名字叫name的值
getAttribute("name"):从session对象中通过name来获取参数
session.setMaxInactiveInterval(arg0):设置session的有效期

5.application:全局应用
作用域：整个应用范围，所有的客户端都可以共用这个作用域
生命周期：就是服务器的运行周期
常用api：
setAttribute("name","value"):在对象中封装一个名字叫name的值
getAttribute("name"):从对象中通过name来获取参数

1.eclipse中tomcate镜像位置：
D:\javaTools\eclipse\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tem1

2.cookie对象
作用：是能将客户的信息保存在客户端，是以文本的形式保存，生命周期由程序决定，可以很长
使用步骤：
a。创建一个cookie对象  ：Cookie cook = new Cookie("key","value");
b.可以设置cookie的有效期：cook.setMaxAge();
c.将该cook对象添加到response对象中，发送（转发和重定向都可以）到前台页面
d.页面发送请求到服务端会带上cookie对象，服务端可以获取里面的信息来做相应的处理

二。servlet
1.是什么：java程序来处理页面请求和响应
2.实现方式：
	a。实现Servlet接口
	b。继承HttpServlet类
	
3.步骤：
	a.创建一个java程序实现Servlet或者继承HttpServlet类
	b.修改web.xml文件
		  <servlet>
	<!--   	servlet名字，可以自定义 -->
	  	<servlet-name>firstServlet</servlet-name>
	<!--   	要执行的servlet程序的完整类名 -->
	  	<servlet-class>com.servlet.FirstServlet</servlet-class>
	  </servlet>
	  <servlet-mapping>
	  	<servlet-name>firstServlet</servlet-name>
	<!--   	访问该servlet的url路径。/表示根目录开始 -->
	  	<url-pattern>/first</url-pattern>
	  </servlet-mapping>
	c.访问：http://localhost:8888/hwua_web/first
	
4.第二种方式：继承HttpServlet，重写里面的doget和doPost方法
方法中的参数：req对应request  resp对应response
session的获取方式：HttpSession session = req.getSession();
	
5.关于web中的路径问题：在页面中访问其他资源时我们要注意包路径的结构。

将页面中加入：
<%
	String path = request.getContextPath();
	String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
%>
<head> <base href="<%=basePath%>"/></head>这句话的作用是将当前网页中的所有连接属性加上了完整路径的前缀。
好处：就是页面的所有路径都从根目录开始写起，包括css，js，img，action，超链接
为了方便页面的编辑，可以将eclipse中的jsp模板修改：点击window--preference--web--jsp files--editor--templates
在右边的列表中找到New Jsp file（html）--点击editor--修改模板--apply

5.get和post的区别：
get：超链接和url以及表单指定get方法
post：表单提交指定post方法
get特点：参数是明文的方式加在url后面，不安全。参数的长度在2048个字符。只能传递字符串
post特点：参数是加密的形式加在url后面，安全。参数的长度没有限制。可以传递二进制数据

                                     
                                     